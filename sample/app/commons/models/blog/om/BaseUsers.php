<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'blog/UsersPeer.php';

/**
 * Base class that represents a row from the 'users' table.
 *
 * 
 *
 * This class was autogenerated by Propel on:
 *
 * Wed Dec  7 01:22:14 2005
 *
 * @package blog.om
 */
abstract class BaseUsers extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var UsersPeer
	 */
	protected static $peer;


	/**
	 * The value for the id field.
	 * @var string
	 */
	protected $id;


	/**
	 * The value for the mail field.
	 * @var string
	 */
	protected $mail;


	/**
	 * The value for the pass field.
	 * @var string
	 */
	protected $pass;

	/**
	 * Collection to store aggregation of collBlogss.
	 * @var array
	 */
	protected $collBlogss;
	
	/**
	 * The criteria used to select the current contents of collBlogss.
	 * @var Criteria
	 */
	private $lastBlogsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return string
	 */
	public function getId()
	{

		return $this->id;
	}

	/**
	 * Get the [mail] column value.
	 * 
	 * @return string
	 */
	public function getMail()
	{

		return $this->mail;
	}

	/**
	 * Get the [pass] column value.
	 * 
	 * @return string
	 */
	public function getPass()
	{

		return $this->pass;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param string $v new value
	 * @return void
	 */
	public function setId($v)
	{

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UsersPeer::ID;
		}

	} // setId()

	/**
	 * Set the value of [mail] column.
	 * 
	 * @param string $v new value
	 * @return void
	 */
	public function setMail($v)
	{

		if ($this->mail !== $v) {
			$this->mail = $v;
			$this->modifiedColumns[] = UsersPeer::MAIL;
		}

	} // setMail()

	/**
	 * Set the value of [pass] column.
	 * 
	 * @param string $v new value
	 * @return void
	 */
	public function setPass($v)
	{

		if ($this->pass !== $v) {
			$this->pass = $v;
			$this->modifiedColumns[] = UsersPeer::PASS;
		}

	} // setPass()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return int next starting column
	 * @throws PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->id = $rs->getString($startcol + 0);

			$this->mail = $rs->getString($startcol + 1);

			$this->pass = $rs->getString($startcol + 2);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 3; // 3 = UsersPeer::NUM_COLUMNS - UsersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Users object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 * @see BaseObject::setDeleted()
	 * @see BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			UsersPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param Connection $con
	 * @return int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws PropelException
	 * @see doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME);
		}
		
		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 * 
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param Connection $con
	 * @return int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws PropelException
	 * @see save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows	
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;
	

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which 
										 // should always be true here (even though technically 
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsersPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collBlogss !== null) {
				foreach($this->collBlogss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param mixed $columns Column name or an array of column names.
	 *
	 * @return mixed <code>true</code> if all columns pass validation
	 *			  or an array of <code>ValidationFailed</code> objects for columns that fail.
	 * @see doValidate()
	 */
	public function validate($columns = null)
	{
	  if ($columns) {
		return UsersPeer::doValidate($this, $columns);
	  }
		return $this->doValidate();
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate()
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UsersPeer::doValidate($this)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collBlogss !== null) {
					foreach($this->collBlogss as $referrerFK) {
						if (($retval = $referrerFK->validate()) !== true) {
							$failureMap = array_merge($failureMap, $retval);
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsersPeer::ID)) $criteria->add(UsersPeer::ID, $this->id);
		if ($this->isColumnModified(UsersPeer::MAIL)) $criteria->add(UsersPeer::MAIL, $this->mail);
		if ($this->isColumnModified(UsersPeer::PASS)) $criteria->add(UsersPeer::PASS, $this->pass);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		$criteria->add(UsersPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param string $key Primary key.
	 * @return void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 * 
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param object $copyObj An object of Users (or compatible) type.
	 * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMail($this->mail);

		$copyObj->setPass($this->pass);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach($this->getBlogss() as $relObj) {
				$copyObj->addBlogs($relObj->copy($deepCopy));
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 * 
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return Users Clone of current object.
	 * @throws PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return UsersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsersPeer();
		}
		return self::$peer;
	}

	/**
	 * Temporary storage of collBlogss to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return void
	 */
	public function initBlogss()
	{
		if ($this->collBlogss === null) {
			$this->collBlogss = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users has previously
	 * been saved, it will retrieve related Blogss from storage.
	 * If this Users is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param Connection $con
	 * @param Criteria $criteria
	 * @throws PropelException
	 */
	public function getBlogss($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'blog/om/BaseBlogsPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBlogss === null) {
			if ($this->isNew()) {
			   $this->collBlogss = array();
			} else {

				$criteria->add(BlogsPeer::USER_ID, $this->getId());

				BlogsPeer::addSelectColumns($criteria);
				$this->collBlogss = BlogsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BlogsPeer::USER_ID, $this->getId());

				BlogsPeer::addSelectColumns($criteria);
				if (!isset($this->lastBlogsCriteria) || !$this->lastBlogsCriteria->equals($criteria)) {
					$this->collBlogss = BlogsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBlogsCriteria = $criteria;
		return $this->collBlogss;
	}

	/**
	 * Returns the number of related Blogss.
	 *
	 * @param Criteria $criteria
	 * @param Connection $con
	 * @throws PropelException
	 */
	public function countBlogss($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'blog/om/BaseBlogsPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(BlogsPeer::USER_ID, $this->getId());

		return BlogsPeer::doCount($criteria, $con);
	}

	/**
	 * Method called to associate a Blogs object to this object
	 * through the Blogs foreign key attribute
	 *
	 * @param Blogs $l Blogs
	 * @return void
	 * @throws PropelException
	 */
	public function addBlogs(Blogs $l)
	{
		$this->collBlogss[] = $l;
		$l->setUsers($this);
	}

} // BaseUsers
