ある特定のレコードを取得することはよくあるでしょう。
それは一人の会員かもしれませんし、一つの商品かもしれません。

最も多いのはプライマリキーを指定して取得することでしょう。

前項ではselect()メソッドを使用して会員を検索、取得しました。
ここでも、前項と同じデータを用いてサンプルを示します。

select()を使用する方法では、下記のようなコードになります。

  $members = MODEL("Member")->select(2);
  $member = (isset($members[0])) ? $members[0] : null;

  if ($member) {
    echo "ID: " . $member->id . " " . $member->name;
    echo "<br/>";
  }

  出力結果:
    ID: 2 suzuki

このコードはうまく働きますが、一人だけ取得するのに配列で結果が返ってくるのは問題です。
selectOne()メソッドを使用し、コードを置き換えてみます。

  $member = MODEL("Member")->selectOne(2);

  if ($member->isSelected()) {
    echo "ID: " . $member->id . " " . $member->name;
    echo "<br/>";
  }

  出力結果:
    ID: 2 suzuki

selectOne()メソッドではオブジェクト(モデル)が返されます。
select()の結果の[0]を返しているのとほとんど同じことです。

selectOne()でレコードが存在したかどうか確かめるにはisSelected()メソッドを使用します。
存在しない会員ID(100など)を指定すれば、isSelected()の結果はfalseになります。

では次に、会員データを更新してみましょう。
会員ID 1番の'tanaka'さんが誕生日を迎えたので、年齢を更新します。

更新にはsave()メソッドを使用します。
save()メソッドの返り値は更新(登録)された新規モデルです。

  $member = MODEL("Member")->selectOne(1);

  if ($member->isSelected()) {
    $member->age = 32;
    $saved = $member->save();
  } else {
    echo "member not found.";
  }

気づいた方もいるかもしれませんが、このコードはクエリが2回発行されます。

  SELECT id, name, age FROM member WHERE id = 1
  UPDATE member set age = 32 WHERE id = 1

私はこのコードは好きですが、IDが確実に特定できるなら、更新だけしたくなるかもしれません。
そして、それはパフォーマンスのことを考えると良いことです。

直接更新するにはupdate()メソッドを使って行います。
(update()メソッドの返り値は常にnullです。)

  $member = MODEL("Member");
  $member->setCondition(1);
  $member->age = 32;
  $member->update();

これならば事前にSELECTクエリが発行されることはありません。
また、update()には更新データを配列で渡すこともできるので、上記のコードを以下のように書くこともできます。

  $member = MODEL("Member");
  $member->setCondition(1);
  $member->update(array("age" => 32));

では次に新規会員を登録してみましょう。
登録もsave()を使用して行うことができます。
save()は自身がisSelected()かどうかを調べて、更新か登録かを切り替えます。

  $member = MODEL("Member");
  $member->id = 4;
  $member->name = 'yamada';
  $member->age = 35;
  $saved = $member->save();

  echo "ID: " . $saved->id . " " . $saved->name;
  echo "(age: " . $saved->age . ")";

  出力結果:
    ID: 4 yamada(age: 35)

更新と同じようにsave()メソッドを使わない方法もあります。
登録の場合はinsert()を使用します。update()と同じように登録データの配列を渡すことも可能です。

  $member = MODEL("Member");
  $member->id = 4;
  $member->name = 'yamada';
  $member->age = 35;
  $member->insert();

  //$member = MODEL("Member");
  //$member->insert(array("id" => 4, "name" => "yamada", "age" => 35));

insert()メソッドは、テーブルにAUTO INCREMENT(SEQUENCE)カラムがあれば、そのINSERTにより生成された値を返します。
またsave()メソッドで登録した場合も、返り値のモデルには生成された値がセットされています。

例えばこの'member'テーブルの'id'カラムがAUTO INCREMENT(SEQUENCE)カラムだったとします。
その時は以下のように、生成された値を取得することができます。

  $test = MODEL("Member");
  $test->name = 'yamada';
  $member->age = 35;
  $saved = $member->save();

  echo $saved->id; // new id

  $member = MODEL("Member");
  $member->name = 'yamada';
  $member->age = 35;
  $id = $member->insert();

  echo $id; // new id

最後に、selectOne()とsave()の便利な使用法を示します。
IPアドレスごとのアクセス数を記録するテーブルを作成します。

テーブル名: access_log

  ip: VARCHAR(15) NOT NULL (PRIMARY KEY)
  count: INTEGER DEFAULT 0

アクセスを記録するコードは以下のようになります。

  $al = MODEL("AccessLog");
  $log = $al->selectOne($ip);

  if ($log->isSelected()) {
    $log->count += 1;
  }

  $log->save();

'access_log'テーブルから$ip(IPアドレス)で検索します。
もし存在すれば(isSelected()がtrue)なら、カウントを+1します。
save()をコールすると、内部でisSelected()を参照して、UPDATEかINSERTを実行します。

selectOne()ではレコードが存在しなかった時に、内部でコンディションの値をモデル(自身)にセットします。
なのでisSelected()がfalseの時に $log->ip = $ip; というコードを書かなくて良いのです。
