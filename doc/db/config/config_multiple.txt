多くのコンテンツデータを扱うようなシステムでは、データベースを複数使用(分割)するかもしれません。
そのような場合、Sabel_DBではそれぞれにコネクションネームを与え、それをconfig/connection.phpで管理します。

MySQLを3台使用した、簡単なデータベース分割の例を示してみます。

  * ユーザ - 会員データ、プロフィールデータなど
  * ブログ - ブログ・記事データ、それに付随するコメントのデータなど
  * メール - メール(メッセージ)データなど

config/connection.phpに以下のようにパラメータを記述します。

  $params = array("users" => array(
                    "driver" => "mysql",
                    "host" => "192.168.0.50",
                    "database" => "project_users",
                    "user" => "web_user",
                    "password" => "web_pass"),
                  "blog" => array(
                    "driver" => "mysql",
                    "host" => "192.168.0.51",
                    "database" => "project_blog",
                    "user" => "web_user",
                    "password" => "web_pass"),
                  "mail" => array(
                    "driver" => "mysql",
                    "host" => "192.168.0.52",
                    "database" => "project_mail",
                    "user" => "web_user",
                    "password" => "web_pass")
                 );

Model(抽象化レイヤ)を使用する場合はモデルクラスを作成し、コネクションネームを宣言します。
モデルのサンプルをいくつか示してみます。

  class Users extends Sabel_DB_Model
  {
    protected $connectionName = "users";
  }

  class Friends extends Sabel_DB_Model
  {
    protected $connectionName = "users";
  }

  class Blog extends Sabel_DB_Model
  {
    protected $connectionName = "blog";
  }

  class Article extends Sabel_DB_Model
  {
    protected $connectionName = "blog";
  }

  class Mail extends Sabel_DB_Model
  {
    protected $connectionName = "mail";
  }

このようにモデルを作成し、以下のコードを実行することで会員やメールをデータベースを気にすることなく取得できます。

  $user = new Users();
  $allUsers = $user->select();

  $mail = new Mail();
  $allMails = $mail->select();

モデルを作成していなかったり、コネクションネームを宣言していない場合は次のようにします。

  $userModel = MODEL("Users");
  $userModel->setConnectionName("users");
  $allUsers = $userModel->select();

しかしこのコードは現実的ではありません。毎回setConnectionName()をコールしなければならないからです。
そういう意味で、モデルクラスを作成しコネクションネームを宣言しておくことを推奨します。

しかしながら、setConnectionName()でコネクションネームを切り替えられるというのは、ある場面においては有用なことです。
