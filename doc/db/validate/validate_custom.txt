メールアドレスの形式チェックを、カスタムバリデータを使用して行ってみましょう。
モデル(テーブル)は前章のHogeモデルを使用します。

アプリケーションのlib/db/validators.phpを開き、以下のコードをコメントインします。
そして、MODEL_NAMEを'Hoge'に、COLUMN_NAMEを'email'に書き換えます。

  $emailValidator = array("function" => "validateEmailAddress",
                          "model"    => "Hoge",
                          "column"   => "email");

  Sabel_DB_Validate_Config::addValidator($emailValidator);

validateEmailAddressバリデーター(関数)は以下のようになっています。
非常に単純な正規表現なので、もっと厳密にチェックしたい場合は書き換えてください。

カスタムバリデータは、エラーの場合はエラーメッセージを返します。
値が正常な場合は何も返さないか、またはnullを返します。

  function validateEmailAddress($model, $name, $localizedName)
  {
    if ($model->$name !== null) {
      $regex = '/^[\w\.\-]+@([\w\-]+\.)+[a-zA-Z]+$/';
      if (preg_match($regex, $model->$name) === 0) {
        return "invalid email address.";
      }
    }
  }

では、以下のコードを実行してみます。

  $hoge = MODEL("Hoge");
  $hoge->name = "tanaka";
  $hoge->age  = 30;
  $hoge->email = "tanaka@example@com";
  $validator = new Sabel_DB_Validator($hoge);
  $errors = $validator->validate();

  if ($errors) {
    foreach ($errors as $error) {
      echo $error . "<br/>";
    }
  } else {
    $manipulator = new Manipulator($hoge);
    $manipulator->save();
  }

  出力結果
    invalid email address.

カスタムバリデータが機能していることが分かります。

では次に、カスタムバリデータで文字数チェックをしてみます。
アプリケーションのlib/db/validators.phpを開き、以下のコードをコメントインします。
そして、MODEL_NAMEを'Hoge'に、COLUMN_NAMEを'name'に、MAXを8に、MINを4に書き換えます。

  $lengthValidator = array("function"  => "validateLength",
                           "model"     => "Hoge",
                           "column"    => "name",
                           "arguments" => array(8, 4));

  Sabel_DB_Validate_Config::addValidator($lengthValidator);

以下のコードを実行します。

  $hoge = MODEL("Hoge");
  $hoge->name = "tanatanaka";
  $hoge->age  = 30;
  $hoge->email = "tanaka@example.com";
  $validator = new Sabel_DB_Validator($hoge);
  $errors = $validator->validate();

  if ($errors) {
    foreach ($errors as $error) {
      echo $error . "<br/>";
    }
  } else {
    $manipulator = new Manipulator($hoge);
    $manipulator->save();
  }

  出力結果
    name should be 8 characters or less.

'name'に'tan'をセットして実行すると以下のエラーメッセージが出力されます。

  出力結果
    name should be 4 characters or more.

カスタムバリデータとして登録したfunctionには、3つの引数があります。
第1引数は対象となるモデル、第2引数はカラム名、第3引数はローカライズされたカラム名です。
* ローカライズに関しては次章をご覧ください。

そして、第4引数以降は、バリデータを登録する時の'arguments'となります。
'arguments'が配列の場合は、順番に第4引数、第5引数...となります。

lengthValidatorは以下のようになっています。

  function validateLength($model, $name, $localizedName, $max, $min = 0)
  {
    if ($model->$name !== null) {
      $func = (extension_loaded("mbstring")) ? "mb_strlen" : "strlen";
      $length = $func($model->$name);
      if ($length > $max) {
        return "$name should be $max characters or less.";
      } elseif ($length < $min) {
        return "$name should be $min characters or more.";
      }
    }
  }

'arguments' array(8, 4) が第4引数、第5引数の$max, $minに渡ってきていることが分かります。

このように引数を渡せるので、一つのカスタムバリデータで多くのモデルに対応することが可能になります。
例えば'Huga'モデルの'test'カラムは最大が16文字で最小が6文字だとしたら、以下のようにバリデータを登録すればよいだけです。

  $lengthValidator2 = array("function"  => "validateLength",
                            "model"     => "Huga",
                            "column"    => "test",
                            "arguments" => array(16, 6));

  Sabel_DB_Validate_Config::addValidator($lengthValidator2);

標準で置かれているカスタムバリデータを参考に、自分でカスタムバリデータを作成するとよいでしょう。
