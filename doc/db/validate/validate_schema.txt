テスト用のテーブルを作成します。
* このCREATE文は疑似SQLです

CREATE TABLE hoge
(
  id INT NOT NULL SEQUENCE,
  name STRING(24) NOT NULL,
  age SMALLINT NOT NULL,
  email STRING(255) NOT NULL,
  PRIMARY KEY id,
  UNIQUE email
)

Sabel_DB_Validatorのコンストラクタにモデルを渡し、validate()メソッドをコールします。
まずはモデルに何も値をセットしないでバリデートしてみます。

  $hoge = MODEL("Hoge");
  $validator = new Sabel_DB_Validator($hoge);
  $errors = $validator->validate();

  if ($errors) {
    foreach ($errors as $error) {
      echo $error . "<br/>";
    }
  } else {
    $manipulator = new Manipulator($hoge);
    $manipulator->save();
  }

  出力結果:
    please enter a name.
    please enter a age.
    please enter a email.

NOT NULLのカラムに値がセットされていないので、エラーメッセージが3つ出力されました。
'id'カラムもNOT NULLですが、'id'はシーケンス(連番)カラムなので無視されます。
シーケンスカラムに値がセットされている場合は例外を投げます。

では、名前と年齢を入力(セット)してみましょう。

  $hoge = MODEL("Hoge");
  $hoge->name = "tanaka";
  $hoge->age = 30;
  $validator = new Sabel_DB_Validator($hoge);
  $errors = $validator->validate();

  if ($errors) {
    foreach ($errors as $error) {
      echo $error . "<br/>";
    }
  } else {
    $manipulator = new Manipulator($hoge);
    $manipulator->save();
  }

  出力結果:
    please enter a email.

名前と年齢のエラーメッセージが出力されなくなりました。

では、24文字より長い名前を入力してみましょう。

  $hoge = MODEL("Hoge");
  $hoge->name = "toooooooooooooo long name";
  $hoge->age = 30;
  $validator = new Sabel_DB_Validator($hoge);
  $errors = $validator->validate();

  if ($errors) {
    foreach ($errors as $error) {
      echo $error . "<br/>";
    }
  } else {
    $manipulator = new Manipulator($hoge);
    $manipulator->save();
  }

  出力結果:
    name is too long.
    please enter a email.

名前が長すぎると、エラーメッセージが出力されました。

では、名前を元に戻し、'email'にもデータをセットします。
そして、このプログラムを2回走らせてみます。

  $hoge = MODEL("Hoge");
  $hoge->name = "tanaka";
  $hoge->age  = 30;
  $hoge->email = "tanaka@example.com";
  $validator = new Sabel_DB_Validator($hoge);
  $errors = $validator->validate();

  if ($errors) {
    foreach ($errors as $error) {
      echo $error . "<br/>";
    }
  } else {
    $manipulator = new Manipulator($hoge);
    $manipulator->save();
  }

  出力結果:
    'tanaka@example.com' is unavailable.

2回目は、'tanaka@example.com'というメールアドレスは使用されているというエラーメッセージが出力されました。
これは'email'カラムがUNIQUEで宣言されているためです。

